// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tne.Web;

namespace Tne.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tne.Web.ChidOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ChidOrganizations");

                    b.HasData(
                        new { Id = 1, Address = "first", Name = "Child1", OrganizationId = 1 },
                        new { Id = 2, Address = "second", Name = "Child2", OrganizationId = 1 },
                        new { Id = 3, Address = "third", Name = "Child3", OrganizationId = 1 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.AbstractCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("date");

                    b.Property<int>("ItemType");

                    b.Property<int>("PointOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("PointOfMeasureId");

                    b.ToTable("AbstractCounter");

                    b.HasDiscriminator<int>("ItemType");
                });

            modelBuilder.Entity("Tne.Web.Dal.MeteringDevice", b =>
                {
                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("PointOfMeasureId");

                    b.Property<int>("PointOfInstallationId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.HasKey("StartDate", "PointOfMeasureId", "PointOfInstallationId");

                    b.HasAlternateKey("PointOfInstallationId", "PointOfMeasureId", "StartDate");

                    b.HasIndex("PointOfMeasureId");

                    b.ToTable("MeteringDevices");

                    b.HasData(
                        new { StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 1, PointOfInstallationId = 1, EndDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { StartDate = new DateTime(2018, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, PointOfInstallationId = 1 },
                        new { StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 1, PointOfInstallationId = 2, EndDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { StartDate = new DateTime(2018, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, PointOfInstallationId = 2 },
                        new { StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, PointOfInstallationId = 3, EndDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { StartDate = new DateTime(2018, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 3, PointOfInstallationId = 3 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.ObjectOfConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChidOrganizationId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ChidOrganizationId");

                    b.ToTable("ObjectOfConsumption");

                    b.HasData(
                        new { Id = 1, ChidOrganizationId = 1, Name = "1/1 object" },
                        new { Id = 2, ChidOrganizationId = 1, Name = "2/1 object" },
                        new { Id = 3, ChidOrganizationId = 1, Name = "1/1 object" }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.PointOfInstallation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxVolume");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ObjectOfConsumptionId");

                    b.HasKey("Id");

                    b.HasIndex("ObjectOfConsumptionId");

                    b.ToTable("PointOfInstallation");

                    b.HasData(
                        new { Id = 1, MaxVolume = 100, Name = "1 point of i", ObjectOfConsumptionId = 1 },
                        new { Id = 2, MaxVolume = 200, Name = "2 point of i", ObjectOfConsumptionId = 2 },
                        new { Id = 3, MaxVolume = 500, Name = "3 point of i", ObjectOfConsumptionId = 3 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.PointOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ObjectOfConsumptionId");

                    b.HasKey("Id");

                    b.HasIndex("ObjectOfConsumptionId");

                    b.ToTable("PointsOfMeasure");

                    b.HasData(
                        new { Id = 1, Name = "1 point of m", ObjectOfConsumptionId = 1 },
                        new { Id = 2, Name = "2 point of m", ObjectOfConsumptionId = 1 },
                        new { Id = 3, Name = "3 point of m", ObjectOfConsumptionId = 2 },
                        new { Id = 4, Name = "4 point of m", ObjectOfConsumptionId = 2 },
                        new { Id = 5, Name = "5 point of m", ObjectOfConsumptionId = 3 },
                        new { Id = 6, Name = "6 point of m", ObjectOfConsumptionId = 3 },
                        new { Id = 7, Name = "7 point of m", ObjectOfConsumptionId = 3 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 1, Address = "Volokolamskiy 111", Name = "First" }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.Counter", b =>
                {
                    b.HasBaseType("Tne.Web.Dal.AbstractCounter");

                    b.Property<int>("CounterType");

                    b.ToTable("Counter");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new { Id = 1, CheckDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 1, CounterType = 0 },
                        new { Id = 2, CheckDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, CounterType = 1 },
                        new { Id = 3, CheckDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 3, CounterType = 2 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.CurrentTransformator", b =>
                {
                    b.HasBaseType("Tne.Web.Dal.AbstractCounter");

                    b.Property<int>("CurrentTransformatorType");

                    b.Property<int>("Ktt");

                    b.ToTable("CurrentTransformator");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new { Id = 4, CheckDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 1, CurrentTransformatorType = 0, Ktt = 0 },
                        new { Id = 5, CheckDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, CurrentTransformatorType = 0, Ktt = 0 },
                        new { Id = 6, CheckDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 3, CurrentTransformatorType = 0, Ktt = 0 }
                    );
                });

            modelBuilder.Entity("Tne.Web.Dal.VoltageTransformator", b =>
                {
                    b.HasBaseType("Tne.Web.Dal.AbstractCounter");

                    b.Property<int>("CurrentTransformatorType")
                        .HasColumnName("VoltageTransformator_CurrentTransformatorType");

                    b.Property<int>("Ktt")
                        .HasColumnName("VoltageTransformator_Ktt");

                    b.ToTable("VoltageTransformator");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new { Id = 7, CheckDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 1, CurrentTransformatorType = 0, Ktt = 0 },
                        new { Id = 8, CheckDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 2, CurrentTransformatorType = 0, Ktt = 0 },
                        new { Id = 9, CheckDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PointOfMeasureId = 3, CurrentTransformatorType = 0, Ktt = 0 }
                    );
                });

            modelBuilder.Entity("Tne.Web.ChidOrganization", b =>
                {
                    b.HasOne("Tne.Web.Organization", "Organization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tne.Web.Dal.AbstractCounter", b =>
                {
                    b.HasOne("Tne.Web.Dal.PointOfMeasure", "PointOfMeasure")
                        .WithMany()
                        .HasForeignKey("PointOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tne.Web.Dal.MeteringDevice", b =>
                {
                    b.HasOne("Tne.Web.Dal.PointOfInstallation", "PointOfInstallation")
                        .WithMany("Records")
                        .HasForeignKey("PointOfInstallationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tne.Web.Dal.PointOfMeasure", "PointOfMeasure")
                        .WithMany("Records")
                        .HasForeignKey("PointOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tne.Web.Dal.ObjectOfConsumption", b =>
                {
                    b.HasOne("Tne.Web.ChidOrganization", "ChidOrganization")
                        .WithMany("ObjectsOfConsumption")
                        .HasForeignKey("ChidOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tne.Web.Dal.PointOfInstallation", b =>
                {
                    b.HasOne("Tne.Web.Dal.ObjectOfConsumption", "ObjectOfConsumption")
                        .WithMany("PointsOfInstallation")
                        .HasForeignKey("ObjectOfConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tne.Web.Dal.PointOfMeasure", b =>
                {
                    b.HasOne("Tne.Web.Dal.ObjectOfConsumption", "ObjectOfConsumption")
                        .WithMany("PointsOfMeasure")
                        .HasForeignKey("ObjectOfConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
